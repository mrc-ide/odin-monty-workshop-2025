[
  {
    "objectID": "future.html#automatic-migration",
    "href": "future.html#automatic-migration",
    "title": "Future of the tools",
    "section": "Automatic migration",
    "text": "Automatic migration\n\nsys &lt;- odin2::odin({\n  update(y) &lt;- y + rnorm(0, sd)\n  initial(y) &lt;- 0\n  sd &lt;- user()\n})\n\nWarning in odin2::odin({: Found 2 compatibility issues\nReplace calls to 'user()' with 'parameter()'\n✖ sd &lt;- user()\n✔ sd &lt;- parameter()\nReplace calls to r-style random number calls (e.g., 'rnorm()') with monty-stye\ncalls (e.g., 'Normal()')\n✖ update(y) &lt;- y + rnorm(0, sd)\n✔ update(y) &lt;- y + Normal(0, sd)\n\n\n\nYou can use odin_migrate() to rewrite code."
  },
  {
    "objectID": "future.html#gpu-support",
    "href": "future.html#gpu-support",
    "title": "Future of the tools",
    "section": "GPU support",
    "text": "GPU support\n\nMassively parallel stochastic models\n\nProof-of-concept: 1 consumer GPU = 5-10 32-core nodes\n\nSimulation with many parameter sets harder"
  },
  {
    "objectID": "future.html#mpihpc-support",
    "href": "future.html#mpihpc-support",
    "title": "Future of the tools",
    "section": "MPI/HPC support",
    "text": "MPI/HPC support\n\nAlternative approach to parallelism\n\nbased on message passing, rather than shared memory\n\nUse CPU-based HPC with fast networking\nWe are interested in hearing about models that can take advantage of these levels of parallelism"
  },
  {
    "objectID": "future.html#more-radical-changes-to-the-dsl",
    "href": "future.html#more-radical-changes-to-the-dsl",
    "title": "Future of the tools",
    "section": "More radical changes to the DSL?",
    "text": "More radical changes to the DSL?\n\nSupport for events\nMore bounds checking and debugging support\nVector-returning functions (multinomial, matrix mutiplication, etc)\nDescribe models in terms of flows\nComposable sub models (I am told this is very hard!)\nImprove monty’s little DSL!\nWhat else?"
  },
  {
    "objectID": "future.html#automatic-differentiation",
    "href": "future.html#automatic-differentiation",
    "title": "Future of the tools",
    "section": "Automatic differentiation",
    "text": "Automatic differentiation\n\nSimple support implemented as a proof-of-concept\n\ndeterministic discrete time models with no arrays\n\nExpand to support ODE models, models with arrays\nImplement algorithms in monty that can exploit gradients\n\nHMC, NUTS, variational inference\n\nSMC^2, IF^2 and other statistical methods"
  },
  {
    "objectID": "future.html#parallel-tempering",
    "href": "future.html#parallel-tempering",
    "title": "Future of the tools",
    "section": "Parallel tempering",
    "text": "Parallel tempering\n[picture from Bob?]"
  },
  {
    "objectID": "odin.html#ode-models",
    "href": "odin.html#ode-models",
    "title": "An introduction to odin2 and dust2",
    "section": "ODE models",
    "text": "ODE models\n\n\nderiv(S) &lt;- -beta * S * I / N\nderiv(I) &lt;- beta * S * I / N - gamma * I\nderiv(R) &lt;- gamma * I\n\ninitial(S) &lt;- N - I0\ninitial(I) &lt;- I0\ninitial(R) &lt;- 0\n\nN &lt;- parameter(1000)\nI0 &lt;- parameter(10)\nbeta &lt;- parameter(0.2)\ngamma &lt;- parameter(0.1)\n\n\\[\\begin{gather*}\n\\frac{dS}{dt} = -\\beta S \\frac{I}{N}\\\\\n\\frac{dI}{dt} = \\beta S \\frac{I}{N} - \\gamma I\\\\\n\\frac{dR}{dt} = \\gamma I\n\\end{gather*}\\]\n\n\nThings to note:\n\nout of order definition\nevery variable has initial and deriv pair"
  },
  {
    "objectID": "odin.html#compiling-the-model-with-odin2",
    "href": "odin.html#compiling-the-model-with-odin2",
    "title": "An introduction to odin2 and dust2",
    "section": "Compiling the model with odin2",
    "text": "Compiling the model with odin2\nsir_ode &lt;- odin({\n  deriv(S) &lt;- -beta * S * I / N\n  deriv(I) &lt;- beta * S * I / N - gamma * I\n  deriv(R) &lt;- gamma * I\n  \n  initial(S) &lt;- N - I0\n  initial(I) &lt;- I0\n  initial(R) &lt;- 0\n  \n  N &lt;- parameter(1000)\n  I0 &lt;- parameter(10)\n  beta &lt;- parameter(0.2)\n  gamma &lt;- parameter(0.1)\n})\n\nThe odin call generates C code, compiles it with gcc or clang to create a shared library, and loads that plus support code into R to create a generator object gen"
  },
  {
    "objectID": "odin.html#running-the-model-with-dust2",
    "href": "odin.html#running-the-model-with-dust2",
    "title": "An introduction to odin2 and dust2",
    "section": "Running the model with dust2",
    "text": "Running the model with dust2\n\nsys &lt;- dust_system_create(sir_ode, pars = list())\ndust_system_set_state_initial(sys)\nt &lt;- seq(0, 100)\ny &lt;- dust_system_simulate(sys, t)\n\nThe output has dimensions number of states x number of timepoints\n\ndim(y)\n#&gt; [1]   3 101"
  },
  {
    "objectID": "odin.html#unpacking-states",
    "href": "odin.html#unpacking-states",
    "title": "An introduction to odin2 and dust2",
    "section": "Unpacking states",
    "text": "Unpacking states\nOutput can be nicely unpacked into the different states using dust_unpack_state\n\ny &lt;- dust_unpack_state(sys, y)\n\nplot(t, y$I, type = \"l\", xlab = \"Time\", ylab = \"I\")\n\n\n\nFrom the generator object gen we can construct a model (mod), here using no parameters – just using default parameters as defined above. We run over a set of times and output the value of the system at a number of intermediate times."
  },
  {
    "objectID": "odin.html#stochastic-models",
    "href": "odin.html#stochastic-models",
    "title": "An introduction to odin2 and dust2",
    "section": "Stochastic models",
    "text": "Stochastic models\n\n\nupdate(S) &lt;- S - n_SI\nupdate(I) &lt;- I + n_SI - n_IR\nupdate(R) &lt;- R + n_IR\n\ninitial(S) &lt;- N - I0\ninitial(I) &lt;- I0\ninitial(R) &lt;- 0\n\np_SI &lt;- 1 - exp(-beta * I / N * dt)\np_IR &lt;- 1 - exp(-gamma * dt)\nn_SI &lt;- Binomial(S, p_SI)\nn_IR &lt;- Binomial(I, p_IR)\n\nN &lt;- parameter(1000)\nI0 &lt;- parameter(10)\nbeta &lt;- parameter(0.2)\ngamma &lt;- parameter(0.1)\n\n\\[\\begin{gather*}\nS(t + \\Delta t) = S(t) - n_{SI}\\\\\nI(t + \\Delta t) = I(t) + n_{SI} - n_{IR}\\\\\nR(t + \\Delta t) = R(t) + n_{IR}\n\\end{gather*}\\]\n\n\n\ndt is a special parameter\nevery variable has initial and update pair"
  },
  {
    "objectID": "odin.html#compared-with-ode-models",
    "href": "odin.html#compared-with-ode-models",
    "title": "An introduction to odin2 and dust2",
    "section": "…compared with ODE models",
    "text": "…compared with ODE models\n\n\nupdate(S) &lt;- S - n_SI\nupdate(I) &lt;- I + n_SI - n_IR\nupdate(R) &lt;- R + n_IR\n\ninitial(S) &lt;- N - I0\ninitial(I) &lt;- I0\ninitial(R) &lt;- 0\n\np_SI &lt;- 1 - exp(-beta * I / N * dt)\np_IR &lt;- 1 - exp(-gamma * dt)\nn_SI &lt;- Binomial(S, p_SI)\nn_IR &lt;- Binomial(I, p_IR)\n\nN &lt;- parameter(1000)\nI0 &lt;- parameter(10)\nbeta &lt;- parameter(0.2)\ngamma &lt;- parameter(0.1)\n\nderiv(S) &lt;- -beta * S * I / N\nderiv(I) &lt;- beta * S * I / N - gamma * I\nderiv(R) &lt;- gamma * I\n\ninitial(S) &lt;- N - I0\ninitial(I) &lt;- I0\ninitial(R) &lt;- 0\n\nN &lt;- parameter(1000)\nI0 &lt;- parameter(10)\nbeta &lt;- parameter(0.2)\ngamma &lt;- parameter(0.1)"
  },
  {
    "objectID": "odin.html#compiling-with-odin2",
    "href": "odin.html#compiling-with-odin2",
    "title": "An introduction to odin2 and dust2",
    "section": "Compiling with odin2",
    "text": "Compiling with odin2\nsir &lt;- odin({\n  update(S) &lt;- S - n_SI\n  update(I) &lt;- I + n_SI - n_IR\n  update(R) &lt;- R + n_IR\n  \n  initial(S) &lt;- N - I0\n  initial(I) &lt;- I0\n  initial(R) &lt;- 0\n  \n  p_SI &lt;- 1 - exp(-beta * I / N * dt)\n  p_IR &lt;- 1 - exp(-gamma * dt)\n  n_SI &lt;- Binomial(S, p_SI)\n  n_IR &lt;- Binomial(I, p_IR)\n  \n  N &lt;- parameter(1000)\n  I0 &lt;- parameter(10)\n  beta &lt;- parameter(0.2)\n  gamma &lt;- parameter(0.1)\n})"
  },
  {
    "objectID": "odin.html#running-a-single-simulation",
    "href": "odin.html#running-a-single-simulation",
    "title": "An introduction to odin2 and dust2",
    "section": "Running a single simulation",
    "text": "Running a single simulation\n\nsys &lt;- dust_system_create(sir, pars = list(), dt = 0.25)\ndust_system_set_state_initial(sys)\nt &lt;- seq(0, 100)\ny &lt;- dust_system_simulate(sys, t)\ny &lt;- dust_unpack_state(sys, y)\n\nplot(t, y$I, type = \"l\", xlab = \"Time\", ylab = \"Infected population\")"
  },
  {
    "objectID": "odin.html#running-multiple-simulations",
    "href": "odin.html#running-multiple-simulations",
    "title": "An introduction to odin2 and dust2",
    "section": "Running multiple simulations",
    "text": "Running multiple simulations\n\nsys &lt;- dust_system_create(sir, pars = list(), n_particles = 50,\n                                 dt = 0.25)\ndust_system_set_state_initial(sys)\nt &lt;- seq(0, 100)\ny &lt;- dust_system_simulate(sys, t)\ny &lt;- dust_unpack_state(sys, y)\nmatplot(t, t(y$I), type = \"l\", lty = 1, col = \"#00000044\",\n        xlab = \"Time\", ylab = \"Infected population\")"
  },
  {
    "objectID": "odin.html#calculating-incidence-with-zero_every",
    "href": "odin.html#calculating-incidence-with-zero_every",
    "title": "An introduction to odin2 and dust2",
    "section": "Calculating incidence with zero_every",
    "text": "Calculating incidence with zero_every\nsir &lt;- odin({\n  update(S) &lt;- S - n_SI\n  update(I) &lt;- I + n_SI - n_IR\n  update(R) &lt;- R + n_IR\n  update(incidence) &lt;- incidence + n_SI\n  \n  p_SI &lt;- 1 - exp(-beta * I / N * dt)\n  p_IR &lt;- 1 - exp(-gamma * dt)\n  n_SI &lt;- Binomial(S, p_SI)\n  n_IR &lt;- Binomial(I, p_IR)\n  \n  initial(S) &lt;- N - I0\n  initial(I) &lt;- I0\n  initial(R) &lt;- 0\n  initial(incidence, zero_every = 1) &lt;- 0\n  \n  N &lt;- parameter(1000)\n  I0 &lt;- parameter(10)\n  beta &lt;- parameter(0.2)\n  gamma &lt;- parameter(0.1)\n})"
  },
  {
    "objectID": "odin.html#incidence-accumulates-then-resets",
    "href": "odin.html#incidence-accumulates-then-resets",
    "title": "An introduction to odin2 and dust2",
    "section": "Incidence accumulates then resets",
    "text": "Incidence accumulates then resets\n\nsys &lt;- dust_system_create(sir, pars = list(), dt = 1 / 128)\ndust_system_set_state_initial(sys)\nt &lt;- seq(0, 20, by = 1 / 128)\ny &lt;- dust_system_simulate(sys, t)\ny &lt;- dust_unpack_state(sys, y)\n\nplot(t[t %% 1 == 0], y$incidence[t %% 1 == 0], type = \"o\", pch = 19,\n     ylab = \"Infection incidence\", xlab = \"Time\")\nlines(t, y$incidence, col = \"red\")"
  },
  {
    "objectID": "odin.html#time-varying-inputs-using-time",
    "href": "odin.html#time-varying-inputs-using-time",
    "title": "An introduction to odin2 and dust2",
    "section": "Time-varying inputs: using time",
    "text": "Time-varying inputs: using time\nsir &lt;- odin({\n  update(S) &lt;- S - n_SI\n  update(I) &lt;- I + n_SI - n_IR\n  update(R) &lt;- R + n_IR\n  update(incidence) &lt;- incidence + n_SI\n  \n  seed &lt;- if (time == seed_time) seed_size else 0\n  \n  p_SI &lt;- 1 - exp(-beta * I / N * dt)\n  p_IR &lt;- 1 - exp(-gamma * dt)\n  n_SI &lt;- min(seed + Binomial(S, p_SI), S)\n  n_IR &lt;- Binomial(I, p_IR)\n  \n  initial(S) &lt;- N\n  initial(I) &lt;- 0\n  initial(R) &lt;- 0\n  initial(incidence, zero_every = 1) &lt;- 0\n  \n  N &lt;- parameter(1000)\n  beta &lt;- parameter(0.2)\n  gamma &lt;- parameter(0.1)\n  seed_time &lt;- parameter()\n  seed_size &lt;- parameter()\n})"
  },
  {
    "objectID": "odin.html#time-varying-inputs-using-time-1",
    "href": "odin.html#time-varying-inputs-using-time-1",
    "title": "An introduction to odin2 and dust2",
    "section": "Time-varying inputs: using time",
    "text": "Time-varying inputs: using time\n\npars &lt;- list(seed_time = 10, seed_size = 15)\nsys &lt;- dust_system_create(sir, pars = pars, dt = 0.25)\ndust_system_set_state_initial(sys)\nt &lt;- seq(0, 100)\ny &lt;- dust_system_simulate(sys, t)\ny &lt;- dust_unpack_state(sys, y)\n\nplot(t, y$I, type = \"l\", xlab = \"Time\", ylab = \"Infected population\")"
  },
  {
    "objectID": "odin.html#time-varying-inputs-using-interpolate",
    "href": "odin.html#time-varying-inputs-using-interpolate",
    "title": "An introduction to odin2 and dust2",
    "section": "Time-varying inputs: using interpolate",
    "text": "Time-varying inputs: using interpolate\nThe interpolate function in odin can be used for time-varying parameters, with specification of\n\nthe times of changepoints\nthe values at those changepoints\nthe type of interpolation: linear, constant or spline"
  },
  {
    "objectID": "odin.html#time-varying-inputs-using-interpolate-1",
    "href": "odin.html#time-varying-inputs-using-interpolate-1",
    "title": "An introduction to odin2 and dust2",
    "section": "Time-varying inputs: using interpolate",
    "text": "Time-varying inputs: using interpolate\nsir &lt;- odin({\n  update(S) &lt;- S - n_SI\n  update(I) &lt;- I + n_SI - n_IR\n  update(R) &lt;- R + n_IR\n  update(incidence) &lt;- incidence + n_SI\n  \n  beta &lt;- interpolate(beta_time, beta_value, \"constant\")\n  beta_time &lt;- parameter()\n  beta_value &lt;- parameter()\n  dim(beta_time, beta_value) &lt;- parameter(rank = 1)\n  \n  p_SI &lt;- 1 - exp(-beta * I / N * dt)\n  p_IR &lt;- 1 - exp(-gamma * dt)\n  n_SI &lt;- Binomial(S, p_SI)\n  n_IR &lt;- Binomial(I, p_IR)\n  \n  initial(S) &lt;- N - I0\n  initial(I) &lt;- I0\n  initial(R) &lt;- 0\n  initial(incidence, zero_every = 1) &lt;- 0\n  \n  N &lt;- parameter(1000)\n  I0 &lt;- parameter(10)\n  gamma &lt;- parameter(0.1)\n})"
  },
  {
    "objectID": "odin.html#time-varying-inputs-using-interpolate-2",
    "href": "odin.html#time-varying-inputs-using-interpolate-2",
    "title": "An introduction to odin2 and dust2",
    "section": "Time-varying inputs: using interpolate",
    "text": "Time-varying inputs: using interpolate\n\npars &lt;- list(beta_time = c(0, 30), beta_value = c(0.2, 1))\nsys &lt;- dust_system_create(sir, pars = pars, dt = 0.25)\ndust_system_set_state_initial(sys)\nt &lt;- seq(0, 100)\ny &lt;- dust_system_simulate(sys, t)\ny &lt;- dust_unpack_state(sys, y)\n\nplot(t, y$I, type = \"l\", xlab = \"Time\", ylab = \"Infected population\")\nabline(v = 30, lty = 3)"
  },
  {
    "objectID": "odin.html#using-arrays",
    "href": "odin.html#using-arrays",
    "title": "An introduction to odin2 and dust2",
    "section": "Using arrays",
    "text": "Using arrays\nsir_age &lt;- odin({\n  # Equations for transitions between compartments by age group\n  update(S[]) &lt;- S[i] - n_SI[i]\n  update(I[]) &lt;- I[i] + n_SI[i] - n_IR[i]\n  update(R[]) &lt;- R[i] + n_IR[i]\n  update(incidence) &lt;- incidence + sum(n_SI)\n  \n  # Individual probabilities of transition:\n  p_SI[] &lt;- 1 - exp(-lambda[i] * dt) # S to I\n  p_IR &lt;- 1 - exp(-gamma * dt) # I to R\n  \n  # Calculate force of infection\n  \n  # age-structured contact matrix: m[i, j] is mean number\n  # of contacts an individual in group i has with an\n  # individual in group j per time unit\n  m &lt;- parameter()\n  \n  # here s_ij[i, j] gives the mean number of contacts an\n  # individual in group i will have with the currently\n  # infectious individuals of group j\n  s_ij[, ] &lt;- m[i, j] * I[j]\n  \n  # lambda[i] is the total force of infection on an\n  # individual in group i\n  lambda[] &lt;- beta * sum(s_ij[i, ])\n  \n  # Draws from binomial distributions for numbers\n  # changing between compartments:\n  n_SI[] &lt;- Binomial(S[i], p_SI[i])\n  n_IR[] &lt;- Binomial(I[i], p_IR)\n  \n  initial(S[]) &lt;- S0[i]\n  initial(I[]) &lt;- I0[i]\n  initial(R[]) &lt;- 0\n  initial(incidence, zero_every = 1) &lt;- 0\n  \n  S0 &lt;- parameter()\n  I0 &lt;- parameter()\n  beta &lt;- parameter(0.2)\n  gamma &lt;- parameter(0.1)\n  \n  n_age &lt;- parameter()\n  dim(S, S0, n_SI, p_SI) &lt;- n_age\n  dim(I, I0, n_IR) &lt;- n_age\n  dim(R) &lt;- n_age\n  dim(m, s_ij) &lt;- c(n_age, n_age)\n  dim(lambda) &lt;- n_age\n})"
  },
  {
    "objectID": "odin.html#using-arrays-1",
    "href": "odin.html#using-arrays-1",
    "title": "An introduction to odin2 and dust2",
    "section": "Using arrays",
    "text": "Using arrays\n\npars &lt;- list(S0 = c(990, 1000),\n             I0 = c(10, 0),\n             m = matrix(c(1.8, 0.4, 0.4, 1.2) / 2000, 2, 2),\n             beta = 0.2,\n             gamma = 0.1,\n             n_age = 2)\n\nRemember: m[i, j] is the mean number of contacts per time unit for an individual in group i has with an individual in group j"
  },
  {
    "objectID": "odin.html#using-arrays-2",
    "href": "odin.html#using-arrays-2",
    "title": "An introduction to odin2 and dust2",
    "section": "Using arrays",
    "text": "Using arrays\n\nsys &lt;- dust_system_create(sir_age, pars = pars, dt = 0.25)\ndust_system_set_state_initial(sys)\nt &lt;- seq(0, 100)\ny &lt;- dust_system_simulate(sys, t)\ny &lt;- dust_unpack_state(sys, y)\n\nmatplot(t, t(y$I), type = \"l\", lty = 1, col = c(\"red\", \"blue\"),\n        xlab = \"Time\", ylab = \"Infected population\")\nlegend(\"topright\", c(\"children\", \"adults\"), col = c(\"red\", \"blue\"), lty = 1)"
  },
  {
    "objectID": "odin.html#key-features-of-arrays",
    "href": "odin.html#key-features-of-arrays",
    "title": "An introduction to odin2 and dust2",
    "section": "Key features of arrays",
    "text": "Key features of arrays\n\nAll arrays (whether state variable or parameter) need a dim equation\nNo use of i, j etc on LHS - indexing on the LHS is implicit\nSupport for up to 8 dimensions, with index variables i, j, k, l, i5, i6, i7, i8\nFunctions for reducing arrays such as sum, prod, min, max - can be applied over entire array or slices"
  },
  {
    "objectID": "odin.html#arrays-model-with-age-and-vaccine",
    "href": "odin.html#arrays-model-with-age-and-vaccine",
    "title": "An introduction to odin2 and dust2",
    "section": "Arrays: model with age and vaccine",
    "text": "Arrays: model with age and vaccine\nsir_age_vax &lt;- odin({\n  # Equations for transitions between compartments by age group\n  update(S[, ]) &lt;- new_S[i, j]\n  update(I[, ]) &lt;- I[i, j] + n_SI[i, j] - n_IR[i, j]\n  update(R[, ]) &lt;- R[i, j] + n_IR[i, j]\n  update(incidence) &lt;- incidence + sum(n_SI)\n  \n  # Individual probabilities of transition:\n  p_SI[, ] &lt;- 1 - exp(-rel_susceptibility[j] * lambda[i] * dt) # S to I\n  p_IR &lt;- 1 - exp(-gamma * dt) # I to R\n  p_vax[, ] &lt;- 1 - exp(-eta[i, j] * dt)\n  \n  # Force of infection\n  m &lt;- parameter() # age-structured contact matrix\n  s_ij[, ] &lt;- m[i, j] * sum(I[j, ])\n  lambda[] &lt;- beta * sum(s_ij[i, ])\n  \n  # Draws from binomial distributions for numbers changing between\n  # compartments:\n  n_SI[, ] &lt;- Binomial(S[i, j], p_SI[i, j])\n  n_IR[, ] &lt;- Binomial(I[i, j], p_IR)\n  \n  # Nested binomial draw for vaccination in S\n  # Assume you cannot move vaccine class and get infected in same step\n  n_S_vax[, ] &lt;- Binomial(S[i, j] - n_SI[i, j], p_vax[i, j])\n  new_S[, 1] &lt;- S[i, j] - n_SI[i, j] - n_S_vax[i, j] + n_S_vax[i, n_vax]\n  new_S[, 2:n_vax] &lt;- S[i, j] - n_SI[i, j] - n_S_vax[i, j] + n_S_vax[i, j - 1]\n  \n  initial(S[, ]) &lt;- S0[i, j]\n  initial(I[, ]) &lt;- I0[i, j]\n  initial(R[, ]) &lt;- 0\n  initial(incidence, zero_every = 1) &lt;- 0\n  \n  # User defined parameters - default in parentheses:\n  S0 &lt;- parameter()\n  I0 &lt;- parameter()\n  beta &lt;- parameter(0.0165)\n  gamma &lt;- parameter(0.1)\n  eta &lt;- parameter()\n  rel_susceptibility &lt;- parameter()\n  \n  # Dimensions of arrays\n  n_age &lt;- parameter()\n  n_vax &lt;- parameter()\n  dim(S, S0, n_SI, p_SI) &lt;- c(n_age, n_vax)\n  dim(I, I0, n_IR) &lt;- c(n_age, n_vax)\n  dim(R) &lt;- c(n_age, n_vax)\n  dim(m, s_ij) &lt;- c(n_age, n_age)\n  dim(lambda) &lt;- n_age\n  dim(eta) &lt;- c(n_age, n_vax)\n  dim(rel_susceptibility) &lt;- c(n_vax)\n  dim(p_vax, n_S_vax, new_S) &lt;- c(n_age, n_vax)\n})"
  },
  {
    "objectID": "odin.html#arrays-boundary-conditions",
    "href": "odin.html#arrays-boundary-conditions",
    "title": "An introduction to odin2 and dust2",
    "section": "Arrays: boundary conditions",
    "text": "Arrays: boundary conditions\nMultiline equations can be used to deal with boundary conditions, e.g. we have\nnew_S[, 1] &lt;- S[i, j] - n_SI[i, j] - n_S_vax[i, j] + n_S_vax[i, n_vax]\nnew_S[, 2:n_vax] &lt;- S[i, j] - n_SI[i, j] - n_S_vax[i, j] + n_S_vax[i, j - 1]\nwhich we could also write as\nnew_S[, ] &lt;- S[i, j] - n_SI[i, j] - n_S_vax[i, j]\nnew_S[, 1] &lt;- new_S[i, j] + n_S_vax[i, n_vax]\nnew_S[, 2:n_vax] &lt;- new_S[i, j] + n_S_vax[i, j - 1]\nor another way of writing this would be to use if else\nnew_S[, ] &lt;- S[i, j] - n_SI[i, j] - n_S_vax[i, j] +\n    (if (j == 1) n_S_vax[i, n_vax] else n_S_vax[i, j - 1])"
  },
  {
    "objectID": "fitting.html#previously-on-introduction-to-odin",
    "href": "fitting.html#previously-on-introduction-to-odin",
    "title": "Fitting odin models with monty",
    "section": "Previously, on “Introduction to odin”",
    "text": "Previously, on “Introduction to odin”\n\nWe created some simple compartmental models\nWe ran these and observed trajectories over time\nWe saw that stochastic models produce a family of trajectories"
  },
  {
    "objectID": "fitting.html#the-data",
    "href": "fitting.html#the-data",
    "title": "Fitting odin models with monty",
    "section": "The data",
    "text": "The data\nWe have some data on the daily incidence of cases\n\ndata &lt;- read.csv(\"data/incidence.csv\")\nhead(data)\n#&gt;   time cases\n#&gt; 1    1    12\n#&gt; 2    2    23\n#&gt; 3    3    25\n#&gt; 4    4    36\n#&gt; 5    5    30\n#&gt; 6    6    57"
  },
  {
    "objectID": "fitting.html#the-data-1",
    "href": "fitting.html#the-data-1",
    "title": "Fitting odin models with monty",
    "section": "The data",
    "text": "The data\n\nplot(data, pch = 19, col = \"red\")"
  },
  {
    "objectID": "fitting.html#our-model",
    "href": "fitting.html#our-model",
    "title": "Fitting odin models with monty",
    "section": "Our model",
    "text": "Our model\nLet’s fit these data to a model\nsir &lt;- odin({\n  update(S) &lt;- S - n_SI\n  update(I) &lt;- I + n_SI - n_IR\n  update(R) &lt;- R + n_IR\n  update(incidence) &lt;- incidence + n_SI\n  \n  p_SI &lt;- 1 - exp(-beta * I / N * dt)\n  p_IR &lt;- 1 - exp(-gamma * dt)\n  n_SI &lt;- Binomial(S, p_SI)\n  n_IR &lt;- Binomial(I, p_IR)\n  \n  initial(S) &lt;- N - I0\n  initial(I) &lt;- I0\n  initial(R) &lt;- 0\n  initial(incidence, zero_every = 1) &lt;- 0\n  \n  N &lt;- parameter(1000)\n  I0 &lt;- parameter(10)\n  beta &lt;- parameter(0.2)\n  gamma &lt;- parameter(0.1)\n})\nWe will link cases in the data to incidence in the model, and we will treat beta and gamma as unknown parameters to be estimated"
  },
  {
    "objectID": "fitting.html#adding-likelihood-to-the-model",
    "href": "fitting.html#adding-likelihood-to-the-model",
    "title": "Fitting odin models with monty",
    "section": "Adding likelihood to the model",
    "text": "Adding likelihood to the model\nsir &lt;- odin({\n  update(S) &lt;- S - n_SI\n  update(I) &lt;- I + n_SI - n_IR\n  update(R) &lt;- R + n_IR\n  update(incidence) &lt;- incidence + n_SI\n  \n  initial(S) &lt;- N - I0\n  initial(I) &lt;- I0\n  initial(R) &lt;- 0\n  initial(incidence, zero_every = 1) &lt;- 0\n  \n  p_SI &lt;- 1 - exp(-beta * I / N * dt)\n  p_IR &lt;- 1 - exp(-gamma * dt)\n  n_SI &lt;- Binomial(S, p_SI)\n  n_IR &lt;- Binomial(I, p_IR)\n  \n  N &lt;- parameter(1000)\n  I0 &lt;- parameter(10)\n  beta &lt;- parameter(0.2)\n  gamma &lt;- parameter(0.1)\n  \n  cases &lt;- data()\n  cases ~ Poisson(incidence)\n})"
  },
  {
    "objectID": "fitting.html#calculating-likelihood-particle-filtering",
    "href": "fitting.html#calculating-likelihood-particle-filtering",
    "title": "Fitting odin models with monty",
    "section": "Calculating likelihood: particle filtering",
    "text": "Calculating likelihood: particle filtering"
  },
  {
    "objectID": "fitting.html#calculating-likelihood",
    "href": "fitting.html#calculating-likelihood",
    "title": "Fitting odin models with monty",
    "section": "Calculating likelihood",
    "text": "Calculating likelihood\n\nfilter &lt;- dust_filter_create(sir, data = data, time_start = 0,\n                             n_particles = 200, dt = 0.25)\ndust_likelihood_run(filter, list(beta = 0.4, gamma = 0.2))\n#&gt; [1] -92.89566\n\n\nThe system runs stochastically, and the likelihood is different each time:\n\ndust_likelihood_run(filter, list(beta = 0.4, gamma = 0.2))\n#&gt; [1] -93.37538\ndust_likelihood_run(filter, list(beta = 0.4, gamma = 0.2))\n#&gt; [1] -88.08544"
  },
  {
    "objectID": "fitting.html#filtered-trajectories",
    "href": "fitting.html#filtered-trajectories",
    "title": "Fitting odin models with monty",
    "section": "Filtered trajectories",
    "text": "Filtered trajectories\n\ndust_likelihood_run(filter, list(beta = 0.4, gamma = 0.2),\n                    save_trajectories = TRUE)\n#&gt; [1] -87.92554\ny &lt;- dust_likelihood_last_trajectories(filter)\ny &lt;- dust_unpack_state(filter, y)\nmatplot(data$time, t(y$incidence), type = \"l\", col = \"#00000044\", lty = 1,\n        xlab = \"Time\", ylab = \"Incidence\")\npoints(data, pch = 19, col = \"red\")"
  },
  {
    "objectID": "fitting.html#parameters",
    "href": "fitting.html#parameters",
    "title": "Fitting odin models with monty",
    "section": "“Parameters”",
    "text": "“Parameters”\n\nOur filter takes a list of beta and gamma, pars\n\nit could take all sorts of other things, not all of which are to be estimated\nsome of the inputs might be vectors or matrices\n\nOur MCMC takes an unstructured vector \\(\\theta\\)\n\nwe propose a new \\(\\theta^*\\) via some kernel, say a multivariate normal requiring a matrix of parameters corresponding to \\(\\theta\\)\nwe need a prior over \\(\\theta\\), but not necessarily every element of pars\n\nSmoothing this over is a massive nuisance\n\nsome way of mapping from \\(\\theta\\) to pars (and back again)"
  },
  {
    "objectID": "fitting.html#parameter-packers",
    "href": "fitting.html#parameter-packers",
    "title": "Fitting odin models with monty",
    "section": "Parameter packers",
    "text": "Parameter packers\nOur solution, “packers”\n\npacker &lt;- monty_packer(c(\"beta\", \"gamma\"))\npacker\n#&gt; \n#&gt; ── &lt;monty_packer&gt; ──────────────────────────────────────────────────────────────\n#&gt; ℹ Packing 2 parameters: 'beta' and 'gamma'\n#&gt; ℹ Use '$pack()' to convert from a list to a vector\n#&gt; ℹ Use '$unpack()' to convert from a vector to a list\n#&gt; ℹ See `?monty_packer()` for more information\n\n\nWe can transform from \\(\\theta\\) to a named list:\n\npacker$unpack(c(0.2, 0.1))\n#&gt; $beta\n#&gt; [1] 0.2\n#&gt; \n#&gt; $gamma\n#&gt; [1] 0.1\n\n\n\nand back the other way:\n\npacker$pack(c(beta = 0.2, gamma = 0.1))\n#&gt; [1] 0.2 0.1"
  },
  {
    "objectID": "fitting.html#parameter-packers-1",
    "href": "fitting.html#parameter-packers-1",
    "title": "Fitting odin models with monty",
    "section": "Parameter packers",
    "text": "Parameter packers\nBind additional data\n\npacker &lt;- monty_packer(c(\"beta\", \"gamma\"), fixed = list(I0 = 5))\npacker$unpack(c(0.2, 0.1))\n#&gt; $beta\n#&gt; [1] 0.2\n#&gt; \n#&gt; $gamma\n#&gt; [1] 0.1\n#&gt; \n#&gt; $I0\n#&gt; [1] 5"
  },
  {
    "objectID": "fitting.html#parameter-packers-2",
    "href": "fitting.html#parameter-packers-2",
    "title": "Fitting odin models with monty",
    "section": "Parameter packers",
    "text": "Parameter packers\nCope with vector-valued parameters in \\(\\theta\\)\n\npacker &lt;- monty_packer(array = c(beta = 3, gamma = 3))\npacker\n#&gt; \n#&gt; ── &lt;monty_packer&gt; ──────────────────────────────────────────────────────────────\n#&gt; ℹ Packing 6 parameters: 'beta[1]', 'beta[2]', 'beta[3]', 'gamma[1]', 'gamma[2]', and 'gamma[3]'\n#&gt; ℹ Use '$pack()' to convert from a list to a vector\n#&gt; ℹ Use '$unpack()' to convert from a vector to a list\n#&gt; ℹ See `?monty_packer()` for more information\npacker$unpack(c(0.2, 0.21, 0.22, 0.1, 0.11, 0.12))\n#&gt; $beta\n#&gt; [1] 0.20 0.21 0.22\n#&gt; \n#&gt; $gamma\n#&gt; [1] 0.10 0.11 0.12"
  },
  {
    "objectID": "fitting.html#priors",
    "href": "fitting.html#priors",
    "title": "Fitting odin models with monty",
    "section": "Priors",
    "text": "Priors\nAnother DSL, similar to odin’s:\n\nprior &lt;- monty_dsl({\n  beta ~ Exponential(mean = 0.5)\n  gamma ~ Exponential(mean = 0.3)\n})\n\n\nThis is a “monty model”\n\nprior\n#&gt; \n#&gt; ── &lt;monty_model&gt; ───────────────────────────────────────────────────────────────\n#&gt; ℹ Model has 2 parameters: 'beta' and 'gamma'\n#&gt; ℹ This model:\n#&gt; • can compute gradients\n#&gt; • can be directly sampled from\n#&gt; • accepts multiple parameters\n#&gt; ℹ See `?monty_model()` for more information\nmonty_model_density(prior, c(0.2, 0.1))\n#&gt; [1] 1.163787\n\n\n\ncompute this density manually:\n\ndexp(0.2, 1 / 0.5, log = TRUE) + dexp(0.1, 1 / 0.3, log = TRUE)\n#&gt; [1] 1.163787"
  },
  {
    "objectID": "fitting.html#from-a-dust-filter-to-a-monty-model",
    "href": "fitting.html#from-a-dust-filter-to-a-monty-model",
    "title": "Fitting odin models with monty",
    "section": "From a dust filter to a monty model",
    "text": "From a dust filter to a monty model\n\nfilter\n#&gt; \n#&gt; ── &lt;dust_likelihood (odin_system)&gt; ─────────────────────────────────────────────\n#&gt; ℹ 4 state x 200 particles\n#&gt; ℹ The likelihood is stochastic\n#&gt; ℹ This system runs in discrete time with dt = 0.25\n#&gt; ℹ Use coef() (`?stats::coef()`) to get more information on parameters\n\n\nCombine a filter and a packer\n\npacker &lt;- monty_packer(c(\"beta\", \"gamma\"))\nlikelihood &lt;- dust_likelihood_monty(filter, packer)\nlikelihood\n#&gt; \n#&gt; ── &lt;monty_model&gt; ───────────────────────────────────────────────────────────────\n#&gt; ℹ Model has 2 parameters: 'beta' and 'gamma'\n#&gt; ℹ This model:\n#&gt; • is stochastic\n#&gt; ℹ See `?monty_model()` for more information"
  },
  {
    "objectID": "fitting.html#posterior-from-likelihood-and-prior",
    "href": "fitting.html#posterior-from-likelihood-and-prior",
    "title": "Fitting odin models with monty",
    "section": "Posterior from likelihood and prior",
    "text": "Posterior from likelihood and prior\nCombine a likelihood and a prior to make a posterior\n\\[\n\\underbrace{\\Pr(\\theta | \\mathrm{data})}_{\\mathrm{posterior}} \\propto \\underbrace{\\Pr(\\mathrm{data} | \\theta)}_\\mathrm{likelihood} \\times \\underbrace{P(\\theta)}_{\\mathrm{prior}}\n\\]\n\n\nposterior &lt;- likelihood + prior\nposterior\n#&gt; \n#&gt; ── &lt;monty_model&gt; ───────────────────────────────────────────────────────────────\n#&gt; ℹ Model has 2 parameters: 'beta' and 'gamma'\n#&gt; ℹ This model:\n#&gt; • can be directly sampled from\n#&gt; • is stochastic\n#&gt; ℹ See `?monty_model()` for more information\n\n(remember that addition is multiplication on a log scale)"
  },
  {
    "objectID": "fitting.html#create-a-sampler",
    "href": "fitting.html#create-a-sampler",
    "title": "Fitting odin models with monty",
    "section": "Create a sampler",
    "text": "Create a sampler\nA diagonal variance-covariance matrix (uncorrelated parameters)\n\nvcv &lt;- diag(2) * 0.2\nvcv\n#&gt;      [,1] [,2]\n#&gt; [1,]  0.2  0.0\n#&gt; [2,]  0.0  0.2\n\nUse this to create a “random walk” sampler:\n\nsampler &lt;- monty_sampler_random_walk(vcv)\nsampler\n#&gt; \n#&gt; ── &lt;monty_sampler: Random walk (monty_random_walk)&gt; ────────────────────────────\n#&gt; ℹ Use `?monty_sample()` to use this sampler\n#&gt; ℹ See `?monty_random_walk()` for more information"
  },
  {
    "objectID": "fitting.html#lets-sample",
    "href": "fitting.html#lets-sample",
    "title": "Fitting odin models with monty",
    "section": "Let’s sample!",
    "text": "Let’s sample!\n\nsamples &lt;- monty_sample(posterior, sampler, 1000, n_chains = 3)\nsamples\n#&gt; \n#&gt; ── &lt;monty_samples: 2 parameters x 1000 samples x 3 chains&gt; ─────────────────────\n#&gt; ℹ Parameters: 'beta' and 'gamma'\n#&gt; ℹ Conversion to other types is possible:\n#&gt; → ! posterior::as_draws_array() [package installed, but not loaded]\n#&gt; → ! posterior::as_draws_df() [package installed, but not loaded]\n#&gt; → ! coda::as.mcmc.list() [package installed, but not loaded]\n#&gt; ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information"
  },
  {
    "objectID": "fitting.html#the-result-diagnostics",
    "href": "fitting.html#the-result-diagnostics",
    "title": "Fitting odin models with monty",
    "section": "The result: diagnostics",
    "text": "The result: diagnostics\nDiagnostics can be used from the posterior package\n\n## Note: as_draws_df converts samples$pars, and drops anything else in samples\nsamples_df &lt;- posterior::as_draws_df(samples)\nposterior::summarise_draws(samples_df)\n#&gt; # A tibble: 2 × 10\n#&gt;   variable  mean median     sd    mad    q5   q95  rhat ess_bulk ess_tail\n#&gt;   &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1 beta     0.873  0.855 0.132  0.112  0.701 1.10   1.07     67.4     64.9\n#&gt; 2 gamma    0.553  0.547 0.0967 0.0933 0.442 0.720  1.11     67.9     81.9"
  },
  {
    "objectID": "fitting.html#the-results-parameters",
    "href": "fitting.html#the-results-parameters",
    "title": "Fitting odin models with monty",
    "section": "The results: parameters",
    "text": "The results: parameters\nYou can use the posterior package in conjunction with bayesplot (and then also ggplot2)\n\nbayesplot::mcmc_scatter(samples_df)"
  },
  {
    "objectID": "fitting.html#the-result-traceplots",
    "href": "fitting.html#the-result-traceplots",
    "title": "Fitting odin models with monty",
    "section": "The result: traceplots",
    "text": "The result: traceplots\n\nbayesplot::mcmc_trace(samples_df)"
  },
  {
    "objectID": "fitting.html#the-result-density-over-time",
    "href": "fitting.html#the-result-density-over-time",
    "title": "Fitting odin models with monty",
    "section": "The result: density over time",
    "text": "The result: density over time\n\nmatplot(drop(samples$density), type = \"l\", lty = 1)"
  },
  {
    "objectID": "fitting.html#the-result-density-over-time-1",
    "href": "fitting.html#the-result-density-over-time-1",
    "title": "Fitting odin models with monty",
    "section": "The result: density over time",
    "text": "The result: density over time\n\nmatplot(drop(samples$density[-(1:100), ]), type = \"l\", lty = 1)"
  },
  {
    "objectID": "fitting.html#better-mixing",
    "href": "fitting.html#better-mixing",
    "title": "Fitting odin models with monty",
    "section": "Better mixing",
    "text": "Better mixing\n\nvcv &lt;- matrix(c(0.01, 0.005, 0.005, 0.005), 2, 2)\nsampler &lt;- monty_sampler_random_walk(vcv)\nsamples &lt;- monty_sample(posterior, sampler, 2000, initial = samples,\n                        n_chains = 4)\nmatplot(samples$density, type = \"l\", lty = 1)"
  },
  {
    "objectID": "fitting.html#better-mixing-the-results",
    "href": "fitting.html#better-mixing-the-results",
    "title": "Fitting odin models with monty",
    "section": "Better mixing: the results",
    "text": "Better mixing: the results\n\nsamples_df &lt;- posterior::as_draws_df(samples)\nposterior::summarise_draws(samples_df)\n#&gt; # A tibble: 2 × 10\n#&gt;   variable  mean median     sd    mad    q5   q95  rhat ess_bulk ess_tail\n#&gt;   &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1 beta     0.843  0.830 0.121  0.113  0.664 1.07   1.01     458.     556.\n#&gt; 2 gamma    0.529  0.516 0.0953 0.0852 0.393 0.711  1.01     431.     579."
  },
  {
    "objectID": "fitting.html#better-mixing-the-results-1",
    "href": "fitting.html#better-mixing-the-results-1",
    "title": "Fitting odin models with monty",
    "section": "Better mixing: the results",
    "text": "Better mixing: the results\n\nbayesplot::mcmc_scatter(samples_df)"
  },
  {
    "objectID": "fitting.html#better-mixing-the-results-2",
    "href": "fitting.html#better-mixing-the-results-2",
    "title": "Fitting odin models with monty",
    "section": "Better mixing: the results",
    "text": "Better mixing: the results\n\nbayesplot::mcmc_trace(samples_df)"
  },
  {
    "objectID": "fitting.html#configure-the-filter",
    "href": "fitting.html#configure-the-filter",
    "title": "Fitting odin models with monty",
    "section": "Configure the filter",
    "text": "Configure the filter\nUse the n_threads argument, here for 4 threads\n\nfilter &lt;- dust_filter_create(sir, data = data, time_start = 0,\n                             n_particles = 200, dt = 0.25, n_threads = 4)\n\nrequires that you have OpenMP; this is very annoying on macOS"
  },
  {
    "objectID": "fitting.html#configure-a-parallel-runner",
    "href": "fitting.html#configure-a-parallel-runner",
    "title": "Fitting odin models with monty",
    "section": "Configure a parallel runner",
    "text": "Configure a parallel runner\nUse monty_runner_callr, here for 2 workers\n\nrunner &lt;- monty_runner_callr(2)\n\nPass runner through to monty_sample:\n\nsamples &lt;- monty_sample(posterior, sampler, 1000,\n                        runner = runner, n_chains = 4)"
  },
  {
    "objectID": "fitting.html#run-chains-on-different-cluster-nodes",
    "href": "fitting.html#run-chains-on-different-cluster-nodes",
    "title": "Fitting odin models with monty",
    "section": "Run chains on different cluster nodes",
    "text": "Run chains on different cluster nodes\nmonty_sample_manual_prepare(posterior, sampler, 10000, \"mypath\",\n                            n_chains = 10)\nThen run these chains in parallel on your cluster:\nmonty_sample_manual_run(1, \"mypath\")\nmonty_sample_manual_run(2, \"mypath\")\nmonty_sample_manual_run(3, \"mypath\")\nAnd retrieve the result\nsamples &lt;- monty_sample_manual_collect(\"mypath\")"
  },
  {
    "objectID": "fitting.html#saving-history",
    "href": "fitting.html#saving-history",
    "title": "Fitting odin models with monty",
    "section": "Saving history",
    "text": "Saving history\n\nSave your trajectories at every collected sample\nSave the final state at every sample (for onward simulation)\nSave snapshots at intermediate timepoints of the state at every sample (for counterfactuals)"
  },
  {
    "objectID": "fitting.html#trajectories",
    "href": "fitting.html#trajectories",
    "title": "Fitting odin models with monty",
    "section": "Trajectories",
    "text": "Trajectories\n\nlikelihood &lt;- dust_likelihood_monty(filter, packer,\n                                    save_trajectories = TRUE)\nposterior &lt;- likelihood + prior\nsamples &lt;- monty_sample(posterior, sampler, 1000, n_chains = 4)"
  },
  {
    "objectID": "fitting.html#trajectories-1",
    "href": "fitting.html#trajectories-1",
    "title": "Fitting odin models with monty",
    "section": "Trajectories",
    "text": "Trajectories\n\ntrajectories &lt;- dust_unpack_state(filter,\n                                  samples$observations$trajectories)\nmatplot(data$time, trajectories$incidence[, , 1], type = \"l\", lty = 1,\n        col = \"#00000044\", xlab = \"Time\", ylab = \"Infection incidence\")\npoints(data, pch = 19, col = \"red\")"
  },
  {
    "objectID": "fitting.html#trajectories-2",
    "href": "fitting.html#trajectories-2",
    "title": "Fitting odin models with monty",
    "section": "Trajectories",
    "text": "Trajectories\nTrajectories are 4-dimensional\n\n# (4 states x 20 time points x 1000 samples x 4 chains)\ndim(samples$observations$trajectories)\n#&gt; [1]    4   20 1000    4\n\nThese can get very large quickly - there are two main ways to help reduce this:\n\nSaving only a subset of the states\nThinning"
  },
  {
    "objectID": "fitting.html#saving-a-subset-of-trajectories",
    "href": "fitting.html#saving-a-subset-of-trajectories",
    "title": "Fitting odin models with monty",
    "section": "Saving a subset of trajectories",
    "text": "Saving a subset of trajectories\nYou can save a subset via specifying a named vector\n\nlikelihood &lt;- dust_likelihood_monty(filter, packer, \n                                    save_trajectories = c(\"I\", \"incidence\"))\nposterior &lt;- likelihood + prior\nsamples2 &lt;- monty_sample(posterior, sampler, 100, initial = samples)\ndim(samples2$observations$trajectories)\n#&gt; [1]   2  20 100   1"
  },
  {
    "objectID": "fitting.html#thinning",
    "href": "fitting.html#thinning",
    "title": "Fitting odin models with monty",
    "section": "Thinning",
    "text": "Thinning\nWhile running\nsamples &lt;- monty_sample(...,\n                        burnin = 100,\n                        thinning_factor = 2)\nAfter running\n\nsamples &lt;- monty_samples_thin(samples,\n                              burnin = 500,\n                              thinning_factor = 2)\n\n\nThinning while running faster and uses less memory\nAfter running is more flexible (e.g. can plot full chains of parameters between running and thinning)"
  },
  {
    "objectID": "fitting.html#deterministic-models-from-stochastic",
    "href": "fitting.html#deterministic-models-from-stochastic",
    "title": "Fitting odin models with monty",
    "section": "Deterministic models from stochastic",
    "text": "Deterministic models from stochastic\n\nStochastic models written in odin, can be run deterministically\nRuns by taking the expectation of any random draws\nThis gives two models for the price of one\nHowever it might not be suitable for all models"
  },
  {
    "objectID": "fitting.html#fitting-in-deterministic-mode",
    "href": "fitting.html#fitting-in-deterministic-mode",
    "title": "Fitting odin models with monty",
    "section": "Fitting in deterministic mode",
    "text": "Fitting in deterministic mode\nThe key difference is to use dust_unfilter_create\n\nunfilter &lt;- dust_unfilter_create(sir, data = data, time_start = 0, dt = 0.25)\n\nNote as this is deterministic it produces the same likelihood every time\n\ndust_likelihood_run(unfilter, list(beta = 0.4, gamma = 0.2))\n#&gt; [1] -371.9752\ndust_likelihood_run(unfilter, list(beta = 0.4, gamma = 0.2))\n#&gt; [1] -371.9752"
  },
  {
    "objectID": "fitting.html#fitting-in-deterministic-mode-1",
    "href": "fitting.html#fitting-in-deterministic-mode-1",
    "title": "Fitting odin models with monty",
    "section": "Fitting in deterministic mode",
    "text": "Fitting in deterministic mode\n\nlikelihood &lt;- dust_likelihood_monty(unfilter, packer, save_trajectories = TRUE)\nposterior &lt;- likelihood + prior\nsamples_det &lt;- monty_sample(posterior, sampler, 1000, n_chains = 4)\nsamples_det &lt;- monty_samples_thin(samples_det,\n                                  burnin = 500,\n                                  thinning_factor = 2)"
  },
  {
    "objectID": "fitting.html#stochastic-v-deterministic-comparison",
    "href": "fitting.html#stochastic-v-deterministic-comparison",
    "title": "Fitting odin models with monty",
    "section": "Stochastic v deterministic comparison",
    "text": "Stochastic v deterministic comparison\n\ny &lt;- dust2::dust_unpack_state(filter, samples$observations$trajectories)\nincidence &lt;- array(y$incidence, c(20, 1000))\nmatplot(data$time, incidence, type = \"l\", lty = 1, col = \"#00000044\",\n        xlab = \"Time\", ylab = \"Infection incidence\", ylim = c(0, 75))\npoints(data, pch = 19, col = \"red\")"
  },
  {
    "objectID": "fitting.html#stochastic-v-deterministic-comparison-1",
    "href": "fitting.html#stochastic-v-deterministic-comparison-1",
    "title": "Fitting odin models with monty",
    "section": "Stochastic v deterministic comparison",
    "text": "Stochastic v deterministic comparison\n\ny &lt;- dust2::dust_unpack_state(filter, samples_det$observations$trajectories)\nincidence &lt;- array(y$incidence, c(20, 1000))\nmatplot(data$time, incidence, type = \"l\", lty = 1, col = \"#00000044\",\n        xlab = \"Time\", ylab = \"Infection incidence\", ylim = c(0, 75))\npoints(data, pch = 19, col = \"red\")"
  },
  {
    "objectID": "fitting.html#stochastic-v-deterministic-comparison-2",
    "href": "fitting.html#stochastic-v-deterministic-comparison-2",
    "title": "Fitting odin models with monty",
    "section": "Stochastic v deterministic comparison",
    "text": "Stochastic v deterministic comparison\n\npars_stochastic &lt;- array(samples$pars, c(2, 500))\npars_deterministic &lt;- array(samples_det$pars, c(2, 500))\nplot(pars_stochastic[1, ], pars_stochastic[2, ], ylab = \"gamma\", xlab = \"beta\",\n     pch = 19, col = \"blue\")\npoints(pars_deterministic[1, ], pars_deterministic[2, ], pch = 19, col = \"red\")\nlegend(\"bottomright\", c(\"stochastic fit\", \"deterministic fit\"), pch = c(19, 19), \n       col = c(\"blue\", \"red\"))"
  },
  {
    "objectID": "fitting.html#projections-and-counterfactuals",
    "href": "fitting.html#projections-and-counterfactuals",
    "title": "Fitting odin models with monty",
    "section": "Projections and counterfactuals",
    "text": "Projections and counterfactuals\nLet’s use some new data\n\ndata &lt;- read.csv(\"data/schools.csv\")\nplot(data, pch = 19, col = \"red\")"
  },
  {
    "objectID": "fitting.html#projections-and-counterfactuals-1",
    "href": "fitting.html#projections-and-counterfactuals-1",
    "title": "Fitting odin models with monty",
    "section": "Projections and counterfactuals",
    "text": "Projections and counterfactuals\nWe’ll fit the data to an SIS model incorporating schools opening/closing\nsis &lt;- odin({\n  update(S) &lt;- S - n_SI + n_IS\n  update(I) &lt;- I + n_SI - n_IS\n  update(incidence) &lt;- incidence + n_SI\n  \n  initial(S) &lt;- N - I0\n  initial(I) &lt;- I0\n  initial(incidence, zero_every = 1) &lt;- 0\n  \n  schools &lt;- interpolate(schools_time, schools_open, \"constant\")\n  schools_time &lt;- parameter()\n  schools_open &lt;- parameter()\n  dim(schools_time, schools_open) &lt;- parameter(rank = 1)\n  \n  beta &lt;- ((1 - schools) * (1 - schools_modifier) + schools) * beta0\n  \n  p_SI &lt;- 1 - exp(-beta * I / N * dt)\n  p_IS &lt;- 1 - exp(-gamma * dt)\n  n_SI &lt;- Binomial(S, p_SI)\n  n_IS &lt;- Binomial(I, p_IS)\n  \n  N &lt;- parameter(1000)\n  I0 &lt;- parameter(10)\n  beta0 &lt;- parameter(0.2)\n  gamma &lt;- parameter(0.1)\n  schools_modifier &lt;- parameter(0.6)\n  \n  cases &lt;- data()\n  cases ~ Poisson(incidence)\n})"
  },
  {
    "objectID": "fitting.html#projections-and-counterfactuals-2",
    "href": "fitting.html#projections-and-counterfactuals-2",
    "title": "Fitting odin models with monty",
    "section": "Projections and counterfactuals",
    "text": "Projections and counterfactuals\n\nschools_time &lt;- c(0, 50, 60, 120, 130, 170, 180)\nschools_open &lt;- c(1,  0,  1,   0,   1,   0,   1)\n\nWe will\n\nproject forward from the end of the fits (day 150) to day 200\nrun a counterfactual where the schools did not reopen on day 60, reopening on day 130"
  },
  {
    "objectID": "fitting.html#fitting-to-the-sis-model",
    "href": "fitting.html#fitting-to-the-sis-model",
    "title": "Fitting odin models with monty",
    "section": "Fitting to the SIS model",
    "text": "Fitting to the SIS model\n\npacker &lt;- monty_packer(c(\"beta0\", \"gamma\", \"schools_modifier\"),\n                       fixed = list(schools_time = schools_time,\n                                    schools_open = schools_open))\n\nfilter &lt;- dust_filter_create(sis, time_start = 0, dt = 1,\n                             data = data, n_particles = 200)\n\nprior &lt;- monty_dsl({\n  beta0 ~ Exponential(mean = 0.3)\n  gamma ~ Exponential(mean = 0.1)\n  schools_modifier ~ Uniform(0, 1)\n})\n\nvcv &lt;- diag(c(2e-4, 2e-4, 4e-4))\nsampler &lt;- monty_sampler_random_walk(vcv)"
  },
  {
    "objectID": "fitting.html#fitting-to-the-sis-model-1",
    "href": "fitting.html#fitting-to-the-sis-model-1",
    "title": "Fitting odin models with monty",
    "section": "Fitting to the SIS model",
    "text": "Fitting to the SIS model\nWe want to save the end state, and a snapshot at day 60 (where the counterfactual will diverge)\n\nlikelihood &lt;- dust_likelihood_monty(filter, packer, save_trajectories = TRUE,\n                                    save_state = TRUE, save_snapshots = 60)\n\nposterior &lt;- likelihood + prior\n\nsamples &lt;- monty_sample(posterior, sampler, 500, initial = c(0.3, 0.1, 0.5),\n                        n_chains = 4)\nsamples &lt;- monty_samples_thin(samples, burnin = 100, thinning_factor = 8)"
  },
  {
    "objectID": "fitting.html#fit-to-data",
    "href": "fitting.html#fit-to-data",
    "title": "Fitting odin models with monty",
    "section": "Fit to data",
    "text": "Fit to data\n\ny &lt;- dust_unpack_state(filter, samples$observations$trajectories)\nincidence &lt;- array(y$incidence, c(150, 200))\nmatplot(data$time, incidence, type = \"l\", col = \"#00000044\", lty = 1,\n        xlab = \"Time\", ylab = \"Incidence\")\npoints(data, pch = 19, col = \"red\")"
  },
  {
    "objectID": "fitting.html#running-projection-using-the-end-state",
    "href": "fitting.html#running-projection-using-the-end-state",
    "title": "Fitting odin models with monty",
    "section": "Running projection using the end state",
    "text": "Running projection using the end state\n\nstate &lt;- array(samples$observations$state, c(3, 200))\npars &lt;- array(samples$pars, c(3, 200))\npars &lt;- lapply(seq_len(200), function(i) packer$unpack(pars[, i]))\n\nsys &lt;- dust_system_create(sis, pars, n_groups = length(pars), dt = 1)\n\ndust_system_set_state(sys, state)\nt &lt;- seq(150, 200)\ny &lt;- dust_system_simulate(sys, t)\ny &lt;- dust_unpack_state(sys, y)"
  },
  {
    "objectID": "fitting.html#running-projection-using-the-end-state-1",
    "href": "fitting.html#running-projection-using-the-end-state-1",
    "title": "Fitting odin models with monty",
    "section": "Running projection using the end state",
    "text": "Running projection using the end state\n\nmatplot(data$time, incidence, type = \"l\", col = \"#00000044\", lty = 1,\n        xlab = \"Time\", ylab = \"Incidence\", xlim = c(0, 200))\nmatlines(t, t(y$incidence), col = \"blue\")\npoints(data, pch = 19, col = \"red\")"
  },
  {
    "objectID": "fitting.html#running-counterfactual-using-the-snapshot",
    "href": "fitting.html#running-counterfactual-using-the-snapshot",
    "title": "Fitting odin models with monty",
    "section": "Running counterfactual using the snapshot",
    "text": "Running counterfactual using the snapshot\n\nsnapshot &lt;- array(samples$observations$snapshots, c(3, 200))\npars &lt;- array(samples$pars, c(3, 200))\nf &lt;- function(i) {\n  p &lt;- packer$unpack(pars[, i])\n  p$schools_time &lt;- c(0, 50, 130, 170, 180)\n  p$schools_open &lt;- c(1, 0, 1, 0, 1)\n  p\n}\npars &lt;- lapply(seq_len(200), f)\nsys &lt;- dust_system_create(sis, pars, n_groups = length(pars), dt = 1)\n\ndust_system_set_state(sys, snapshot)\nt &lt;- seq(60, 150)\ny &lt;- dust_system_simulate(sys, t)\ny &lt;- dust_unpack_state(sys, y)"
  },
  {
    "objectID": "fitting.html#running-counterfactual-using-the-snapshot-1",
    "href": "fitting.html#running-counterfactual-using-the-snapshot-1",
    "title": "Fitting odin models with monty",
    "section": "Running counterfactual using the snapshot",
    "text": "Running counterfactual using the snapshot\n\nmatplot(data$time, incidence, type = \"l\", col = \"#00000044\", lty = 1,\n        xlab = \"Time\", ylab = \"Incidence\")\nmatlines(t, t(y$incidence), col = \"blue\")\npoints(data, pch = 19, col = \"red\")"
  }
]