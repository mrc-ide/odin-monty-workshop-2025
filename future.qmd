---
title: "Future of the tools"
format:
  revealjs:
    preview-links: auto
    logo: "images/logo.png"
    footer: "[mrc-ide/odin-monty-workshop-2025](.)"
execute:
  echo: true
  message: true
  output: true
  warning: true
---

# What is new?

* Since `odin` v1 (classic odin, pre 2020)
  - comparison to data and likelihood support
  - run multiple sets of paramters at once
  - run in parallel

# What is new?

* Since `odin.dust` (2024 rewrite)
  - more efficient parameter updating
  - parameter packers
  - better parallelism
  - periodic variable resetting
  - better error messages
  - compile time array bounds checking
  - debugging support

# Syntax changes

* `user()` -> `parameter()`
* Discrete models have a proper time basis, `dt` is now a reserved word
* No longer use R's names for distribution functions
* Named arguments allow clearer code

## Automatic migration

```{r}
sys <- odin2::odin({
  update(y) <- y + rnorm(0, sd)
  initial(y) <- 0
  sd <- user()
})
```

. . .

You can use `odin_migrate()` to rewrite code.

# Limitations

* Much slower compilation time (we will mitigate this by using js)
* Delays less flexible than in version 1 (cannot be used in discrete time models, the default argument has been removed)

# Practical considerations

* Handful of missing features from `odin` v1 and `dust` v1 (`odin.dust`)
  - delayed delays
  - mixed time models
  - compilation to JavaScript
  - extendable via C++

# Practical considerations

* The great package migration
  - `dust2` to `dust`
  - `odin2` to `odin` and all onto CRAN
  - Once on CRAN, our ability to change the `dust` and `monty` C++ code is reduced

# Planned new features

## GPU support

* Massively parallel stochastic models
  - Proof-of-concept: 1 consumer GPU = 5-10 32-core nodes
* Simulation with many parameter sets harder

## MPI/HPC support

* Alternative approach to parallelism
  - based on message passing, rather than shared memory
* Use CPU-based HPC with fast networking
* We are interested in hearing about models that can take advantage of these levels of parallelism

## More radical changes to the DSL?

* Support for events
* More bounds checking and debugging support
* Vector-returning functions (multinomial, matrix mutiplication, etc)
* Describe models in terms of flows
* Composable sub models (I am told this is very hard!)
* Improve monty's little DSL!
* What else?

## Automatic differentiation

* Simple support implemented as a proof-of-concept
  - deterministic discrete time models with no arrays
* Expand to support ODE models, models with arrays
* Implement algorithms in monty that can exploit gradients
  - HMC, NUTS, variational inference

* SMC^2, IF^2 and other statistical methods

## Parallel tempering

[picture from Bob?]
